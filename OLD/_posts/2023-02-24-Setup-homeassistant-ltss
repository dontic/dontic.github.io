---
title: "Setup LTSS in home assistant with Postgres and TimescaleDB"
categories:
  - Projects
tags:
  - homeassistant
  - home automation
  - postgres
  - timescaledb
  - postgis
  - grafana
toc: true
toc_sticky: true
---

I run a Home Assistant instance at home and, since I'm a data nerd, I wanted to keep track of every state long term.

Why? Do you ask? Because I want to look at what the temperature in my room was 10 years ago, don't judge me!

There are a couple of guides out there that show you how to do this using Docker, but since I have a virtualized environment with Proxmox, and want to make my life a living hell, I will show you how to do this if you have different environments already for Postgres and Grafana as I did.

Why? Well, I already had a Postgres 14 production server in a Debian LXC for my backend projects. I also had a Grafana in another Debian LXC. This way I can have everything centralized rather than spining Docker instances all over the place. I have all my Grafana dashboards in one place as well as my production databases.

So, lets start, shall we?

Note: I will assume you know all about the goodness of Proxmox, LXCs, linux and such. If not, I really recommend [Network Chuck's video on it](https://www.youtube.com/watch?v=_u8qTN3cCnQ).

# Setting up the Postgres instance

## Debian setup

Spin up a Debian LXC in your Proxmox environment. (I used Debian 11 Bullseye in this guide).

Do not forget to:

```
apt update
apt upgrade
```

I'm now assuming you're logged in as root.

We will need a user named "postgres" in our system. This is just convenient to manage the databases later on:

```
adduser postgres
```

Give sudo permissions to postgres user:

```
usermod -aG sudo postgres
```

And finally, switch users:

```
su postgres
```

## Postgress installation

Ok, cool, Debian part is done, not bad huh?  
Now you want to start by installing Postgres:

```
sudo apt install postgresql
```

Now install the Postgres client (this will allow you to mess with the databases with the `psql` command):

```
sudo apt install postgresql-client
```

Connect to the postgres instance:

```
psql
```

Set a password for the `postgres` user:

```
\password postgres
```

Exit the postgres instance:

```
\q
```

At the time of writing this, this will install Postgres 14. This is important as some installations bellow will use this specific version. Please note your version and modify the requirements accordingly.

## TimescaleDB installation

Ok, ok, I hear you. What the hell is this?

TimescaleDB is a Postgres extension that makes sequential (not relational, think time series) data logging like telemetry, sensor and actuator states, etc; much much more efficient. It uses stuff like hypertables and chunking and other fancy stuff I'm not going to get into.

Add the TimescaleDB repo to the system:

```
echo "deb https://packagecloud.io/timescale/timescaledb/debian/bullseye main" | sudo tee /etc/apt/sources.list.d/timescaledb.list

```

Note that I added "...debian/bullseye" as that's my system. But change it if your Debian instance is other than that.

Now add the GPG key for it:

```
wget --quiet -O - https://packagecloud.io/timescale/timescaledb/gpgkey | sudo apt-key add -

```

Update the repository list:

```
apt update
```

And, finally... install TimescaleDB

```
apt install timescaledb-2-postgresql-14
```

^ Remember I installed Postgres 14!

Now you need to enable TimescaleDB by running:

```
timescaledb-tune
```

Follow the prompts to configure it, I just chose the defaults for my stuff.

Restart Postgres:

```
systemctl restart postgresql
```

## PostGIS installation

Install PostGIS:

```
sudo apt install postgis
```

and

```
sudo apt install postgresql-14-postgis-3
```

^ Remember to look up the specific version for your postgres instance!

## Database creation and configuration

Now you will create a database for your Home Assistant.

Open the client:

```
psql
```

You should now be logged in as postgres.

You can also use:

```
psql -U postgres
```

Create the database, in my case I named it `homeassistant`:

```
CREATE DATABASE homeassistant;
```

Connect to the database:

```
\c homeassistant
```

Once you're in the database you will see that if you run the `\dx` command, there will be no extensions installed in this database.

Create timescaledb extension:

```
CREATE EXTENSION IF NOT EXISTS timescaledb;
```

Create the PostGIS extension:

```
CREATE EXTENSION IF NOT EXISTS postgis;
```

If all went fine, running `\dx` again should show both extensions in the `homeassistant` database.

This part is done! Let's now go to your home assistant instance and set it up.

# Home Assistant configuration

Here you will need to have HACS installed, is not completely necessary but it's really really convenient to have.

I won't go into details on how to set it up but the [HACS documentation](https://hacs.xyz/docs/setup/download/) on how to do it is pretty good.

Go to the HACS TAB.
![HACS tab](/assets/images/2023-02-24-Setup-homeassistant-ltss/hacs_tab.png)

Then go to the HACS integrations (I know my stuff is in Spanish but just follow the icons).
![integrations](/assets/images/2023-02-24-Setup-homeassistant-ltss/hacs_integrations.png)

Then hit "EXPLORE & DOWNLOAD REPOSITORIES":
![explore & download](/assets/images/2023-02-24-Setup-homeassistant-ltss/hacs_explore_repositories.png)

Here you want to search for **"ltss"**. Hit it, then click **"Download"** at the bottom right. Have no visuals for this since I already installed it.

Once you're done **restart Home Assistant**.

After the restart, head to your `configuration.yaml` and add these lines to it:

```
# Postgres config for LTSS
ltss:
  db_url: postgresql://postgres:YOURPOSTGRESPASSWORD@IPADDRESSOFTHEPOSTGRESLXC/homeassistant
  include:
    domains:
    - sensor
    - person
```

- `YOURPOSTGRESPASSWORD` should be the password you set for user `postgres` when you configured it.
- `IPADDRESSOFTHEPOSTGRESLXC` is the local address of the LXC. If your Debian environment is outside your local network then you should configure routing for it.
- I included `sensor` and `person` domains since I want to track those, but personalise this as you want, you can even include or exclude entities. [See the LTSS documentation](https://github.com/freol35241/ltss).

Save the `configuration.yaml` and restart Home Assistant. If all went fine, you can go to your Postgres instance, connect to the home assistant database and run `\d` to see the newly created tables.

![new tables](/assets/images/2023-02-24-Setup-homeassistant-ltss/new_tables.png)

Done! Now Home Assistant should be sending telemetry to the database!

# Grafana setup

If you don't have a Grafana instance already you can spin an LXC super quickly using tteck's helper script [here](https://tteck.github.io/Proxmox/). Under "Monitoring - Analytics" > "Grafana LXC".

After you have it running, just go to "Settings" > "Data sources" > "Add data source":
![new tables](/assets/images/2023-02-24-Setup-homeassistant-ltss/data_source.png)

Here, search for "Postgres" and click on it.
![new tables](/assets/images/2023-02-24-Setup-homeassistant-ltss/postgres_grafana.png)

Now just copy my settings here, change `YOURIP` and input your password.
![new tables](/assets/images/2023-02-24-Setup-homeassistant-ltss/grafana_postgres_config.png)

Now you can start adding dashboards and graphs to it!

You can even [add the dashboard to your home assistant UI](https://community.home-assistant.io/t/home-assistant-community-add-on-grafana/54674).

Hope this was useful for you. If there's anything you would like to add or change to this guide feel free to reach out!
