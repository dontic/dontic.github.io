---
import type { CollectionEntry } from 'astro:content';

interface Props {
  posts: CollectionEntry<'blog'>[];
}

const { posts } = Astro.props;

// Sort posts by date (newest first) and group by year
const postsByYear = posts
  .sort((a, b) => b.data.pubDatetime.getTime() - a.data.pubDatetime.getTime())
  .reduce(
    (acc, post) => {
      const year = post.data.pubDatetime.getFullYear();
      if (!acc[year]) {
        acc[year] = [];
      }
      acc[year].push(post);
      return acc;
    },
    {} as Record<number, CollectionEntry<'blog'>[]>
  );

// Get years in descending order
const years = Object.keys(postsByYear)
  .map(Number)
  .sort((a, b) => b - a);
---

{
  years.map((year) => (
    <div class="mb-8">
      <h2 class="text-2xl font-bold mb-4">{year}</h2>
      <ul class="space-y-4">
        {postsByYear[year].map((post) => {
          const formattedDate = `${post.data.pubDatetime.getDate().toString().padStart(2, '0')}.${(post.data.pubDatetime.getMonth() + 1).toString().padStart(2, '0')}`;
          return (
            <li class="flex items-start">
              <span class="text-gray-500 w-12 flex-shrink-0 text-right mr-4">{formattedDate}</span>
              <a href={`/blog/${post.id}/`} class="hover:underline">
                {post.data.title}
              </a>
            </li>
          );
        })}
      </ul>
    </div>
  ))
}
