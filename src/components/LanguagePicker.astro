---
import { languages, defaultLang } from "../i18n/ui";
import { type Languages } from "i18n/utils";

const currentLang = (Astro.currentLocale as Languages) || defaultLang;

const { dropdownEnabled = false } = Astro.props;

const currentUrl = Astro.url.pathname;

const getLocaleUrl = (lang: string) => {
  // Strip the locale from the current URL if it's there
  if (currentUrl.startsWith(`/${currentLang}`)) {
    if (lang === defaultLang) {
      return currentUrl.replace(`/${currentLang}`, "");
    } else {
      return currentUrl.replace(`/${currentLang}`, `/${lang}`);
    }
  } else {
    if (lang === defaultLang) {
      return currentUrl;
    } else {
      return `/${lang}${currentUrl}`;
    }
  }
};
---

{
  dropdownEnabled ? (
    <>
      <div class="p-10">
        <div class="dropdown relative inline-block">
          <button
            type="button"
            class="inline-flex w-full justify-center gap-x-1.5 rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50"
            id="menu-button"
            aria-expanded="true"
            aria-haspopup="true"
          >
            {languages[currentLang].shortLabel}
            <svg
              class="-mr-1 h-5 w-5 text-gray-400"
              viewBox="0 0 20 20"
              fill="currentColor"
              aria-hidden="true"
            >
              <path
                fill-rule="evenodd"
                d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z"
                clip-rule="evenodd"
              />
            </svg>
          </button>

          <ul class="dropdown-menu absolute hidden pt-1 text-gray-700">
            {Object.entries(languages).map(([key, language]) => (
              <li class="">
                <a
                  href={key === currentLang ? "#" : `${getLocaleUrl(key)}`}
                  class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-400"
                  role="menuitem"
                  tabindex="-1"
                >
                  {language.shortLabel}
                </a>
              </li>
            ))}
          </ul>
        </div>
      </div>
    </>
  ) : (
    <div class="flex gap-x-2">
      <a>|</a>
      {Object.entries(languages).map(([key, language]) => (
        <a
          href={key === currentLang ? "#" : `${getLocaleUrl(key)}`}
          class="text-gray-700 hover:text-gray-900"
        >
          <span class={`fi fi-${language.countryCode}`} /> |
        </a>
      ))}
    </div>
  )
}

<style>
  .dropdown:hover .dropdown-menu {
    display: block;
  }
</style>
